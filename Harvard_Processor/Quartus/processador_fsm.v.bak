module processador_fsm (flagz, flagn, opcode, clock, reset, pc_re, pc_wr, ir_wr, ir_re, mar_wr, mar_re, clk_md, clk_mi, mbr_wr_m, mbr_re_m, mbr_wr_b, mbr_re_b, ac_wr, ac_re, ula_sel, ula_re);

	//Saidas
	output pc_inicio;
	output pc_re;
	output pc_wr;
	output ir_wr;
	output ir_re;
	output mar_wr;
	output mar_re;
	output clk_md;
	output clk_mi;
	output mbr_wr_m;
	output mbr_re_m;
	output mbr_wr_b;
	output mbr_re_b;
	output ac_wr;
	output ac_re;
	output [3:0]ula_sel;
	output ula_re;

	//Entradas
	input flagz;
	input flagn;
	input [3:0]opcode;
	input clock;
	input reset;
	
	//Regs
	reg est_f;
	reg est_a;

	//Parametros (estados)
	parameter inicio = 5'b00000;
	parameter ler_ir = 5'b00001;
	parameter dec_opcode_1 = 5'b00010;
	parameter dec_opcode_2 = 5'b00011;
	parameter load_1 = 5'b00100;
	parameter load_2 = 5'b00101;
	parameter load_3 = 5'b00110;
	parameter load_4 = 5'b00111;
	parameter load_5 = 5'b01000;
	parameter store_1 = 5'b01001;
	parameter store_2 = 5'b01010;
	parameter store_3 = 5'b01011;
	parameter store_4 = 5'b01100;
	parameter store_5 = 5'b01101;
	parameter ula_op_1 = 5'b01110;
	parameter ula_op_2 = 5'b01111;
	parameter ula_op_3 = 5'b10000;
	parameter ula_op_4 = 5'b10001;
	parameter ula_op_5 = 5'b10010;
	parameter ula_op_6 = 5'b10011;
	parameter jump = 5'b10100;
	parameter pc_inc = 5'b10101;
	
	//Parametros (opcodes)
	parameter lda = 4'b0000;
	parameter sta = 4'b0001;
	parameter add = 4'b0010;
	parameter sub = 4'b0011;
	parameter mul = 4'b0100;
	parameter div = 4'b0101;
	parameter andp = 4'b0110;
	parameter orp = 4'b0111;
	parameter notp = 4'b1000;
	parameter jmp = 4'b1001;
	parameter jn = 4'b1010;
	parameter jz = 4'b1011;
	parameter nop = 4'b1100;
	
	// Decodificador de pr√≥ximo estado
	always @ (*)
	begin
		// Atribuicoes default
		pc_inicio = 0;
		pc_re = 0;
		pc_wr = 0;
		ir_wr = 0;
		ir_re = 0;
		mar_wr = 0;
		mar_re = 0;
		clk_md = 0;
		clk_mi = 0;
		mbr_wr_m = 0;
		mbr_re_m = 0;
		mbr_wr_b = 0;
		mbr_re_b = 0;
		ac_wr = 0;
		ac_re = 0;
		ula_sel = 0;
		ula_re = 0;
		case (est_a)
				inicio: 
					begin
						pc_inicio=1;
						est_f=ler_ir;
					end
				ler_ir:
					begin
						pc_re=1;
						est_f=dec_opcode_1;
					end
				dec_opcode_1:
					begin
						ir_wr=1;
						est_f=dec_opcode_2;
					end
				dec_opcode_2:
					begin
						ir_re=1;
						case (opcode)
							lda: 
								est_f = load_1;
							sta: 
								est_f = store_1;
							add: 
								est_f = ula_op_1;
							sub: 
								est_f = ula_op_1;
							mul:
								st_f = ula_op_1;
							div: 
								est_f = ula_op_1;
							andp: 
								est_f = ula_op_1;
							orp: 
								est_f = ula_op_1;
							notp: 
								est_f = ula_op_4;
							jmp: 
								est_f = jump;
							nop: 
								est_f = pc_inc;
							jz:
								begin 
									if (flagz) est_f = jump;
									else est_f = pc_inc;
								end
							jn :
								begin 
									if (flagn) est_f = jump;
									else est_f=pc_inc;
								end	
						endcase
					end
				load_1:
					begin
						mar_wr=1;
						ir_re=1;
						est_f=load_2;
					end
				load_2:
					begin
						clk_md=1;
						est_f=load_3;
					end
				load_3:
					begin
						mbr_wr_m=1;
						est_f=load_4;
					end
				load_4:
					begin
						mbr_re_b=1;
						est_f=load_5;
					end
				load_5:
					begin
						ac_wr=1;
						mbr_re_b=1;
						est_f=pc_inc;
					end
				store_1:
					begin
						mar_wr=1;
						ir_re=1;
						est_f=store_2;
					end
				store_2:
					begin
						ac_re=1;
						clk_md=1;
						est_f=store_3;
					end
				store_3:
					begin
						ac_re=1;
						mbr_wr_b=1;
						est_f=store_4;
					end
				store_4:
					begin
						mbr_re_m=1;
						est_f=store_5;
					end
				store_5:
					begin
						mbr_re_m=1;
						clk_md=1;
						est_f=pc_inc;
					end
				ula_op_1:
					begin
						mar_wr=1;
						ir_re=1;
						est_f=ula_op_2;
					end
				ula_op_2:
					begin
						mar_re=1;
						est_f=ula_op_3;
					end
				ula_op_3:
					begin
						mbr_wr_m=1;
						est_f=ula_op_4;
					end
				ula_op_4:
					begin
						ula_sel=opcode;
						est_f=ula_op_5;
					end
				ula_op_5:
					begin
						ula_re=1;
						est_f=ula_op_6;
					end
				ula_op_6:
					begin
						ula_re=1;
						ac_wr=1;
						est_f=pc_inc;
					end
				jump:
					begin
						pc_wr=1;
						ir_re=1;
						est_f=ler_ir;
					end
			endcase
	
	end	
	always @ (posedge clock)
		begin
			if (reset) est_a<=inicio;
			else est_a<=est_f;
		end
endmodule

module pc (out_pc, pc_re, pc_wr, pc_inicio, bus);
	output out_pc;
	input pc_re, pc_wr, pc_inicio, bus;
	reg valor;
	always @ (*)
	begin
		if (pc_inicio) out_pc=0;
		if (pc_wr) valor=bus;
		if (pc_re) out_pc=valor;
	end
endmodule

module ir (out_ir_op, out_ir_end, ir_re, ir_wr, out_mem_instrucao);
	output out_ir;
	input ir_re, ir_wr, out_mem_instrucao;
	reg valor;
	always @ (*)
	out_ir=z;
	begin
		if (ir_wr) valor = out_mem_instrucao;
		if (ir_re) 
			begin
				out_ir_op = valor[3:0];
				out_ir_end = valor[N:4]:
			end
	end
endmodule

module ac (out_ac_u, out_ac_b, ac_re, ac_wr, bus);
	output out_ac_u, out_ac_b;
	input ac_re, ac_wr, bus;
	reg valor;
	always @ (*)
	out_ac_b = z;
	begin
		if (ac_wr) valor = bus;
		if (ac_re) out_ac_b = valor;
		out_ac_u = valor;
	end
endmodule

module mar (out_mar, mar_re, mar_wr, bus);
	output out_mar;
	input mar_re, mar_wr, bus;
	reg valor;
	always @ (*)
	begin
		if (mar_wr) valor = bus;
		if (mar_re) out_mar = valor;
	end
endmodule

module mbr (out_mbr_u, out_mbr_b, out_mbr_m, mbr_re_b, mbr_re_m, mbr_wr_b, mbr_wr_m, bus, out_mem_dados);
	output out_mbr_u, out_mbr_b, out_mbr_m;
	input mbr_re_b, mbr_re_m, mbr_wr_b, mbr_wr_m, bus, out_mem_dados;
	reg valor;
	always @ (*)
	out_mbr_b=z;
	begin
		if (mbr_wr_b) valor = bus;
		if (mbr_re_b) out_mbr_b = valor;
		if (mbr_wr_m) valor = out_mem_dados;
		if (mbr_re_m) out_mbr_m = valor;
		out_mbr_u = valor;
	end
endmodule